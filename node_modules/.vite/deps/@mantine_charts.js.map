{
  "version": 3,
  "sources": ["../../@mantine/charts/src/utils/get-series-labels/get-series-labels.ts", "../../@mantine/charts/esm/ChartTooltip/ChartTooltip.module.css.mjs", "../../@mantine/charts/src/ChartTooltip/ChartTooltip.tsx", "../../@mantine/charts/esm/ChartLegend/ChartLegend.module.css.mjs", "../../@mantine/charts/src/ChartLegend/ChartLegend.tsx", "../../@mantine/charts/src/AreaChart/AreaGradient.tsx", "../../@mantine/charts/src/AreaChart/AreaSplit.tsx", "../../@mantine/charts/src/AreaChart/get-split-offset.ts", "../../@mantine/charts/esm/grid-chart.module.css.mjs", "../../@mantine/charts/src/AreaChart/AreaChart.tsx", "../../@mantine/charts/src/BarChart/BarChart.tsx", "../../@mantine/charts/src/LineChart/LineChart.tsx", "../../@mantine/charts/src/Sparkline/Sparkline.tsx", "../../@mantine/charts/esm/DonutChart/DonutChart.module.css.mjs", "../../@mantine/charts/src/DonutChart/DonutChart.tsx", "../../@mantine/charts/esm/PieChart/PieChart.module.css.mjs", "../../@mantine/charts/src/PieChart/PieChart.tsx", "../../@mantine/charts/esm/RadarChart/RadarChart.module.css.mjs", "../../@mantine/charts/src/RadarChart/RadarChart.tsx", "../../@mantine/charts/src/ScatterChart/ScatterChart.tsx", "../../@mantine/charts/src/BubbleChart/BubbleChart.tsx"],
  "sourcesContent": ["import { ChartSeries } from '../../types';\n\ntype ChartSeriesLabels = Record<string, string | undefined>;\n\nexport function getSeriesLabels(series: ChartSeries[] | undefined): ChartSeriesLabels {\n  if (!series) {\n    return {};\n  }\n\n  return series.reduce<ChartSeriesLabels>((acc, item) => {\n    acc[item.name] = item.label;\n    return acc;\n  }, {});\n}\n", "'use client';\nvar classes = {\"tooltip\":\"m_e4d36c9b\",\"tooltipLabel\":\"m_7f4bcb19\",\"tooltipBody\":\"m_3de554dd\",\"tooltipItem\":\"m_3de8964e\",\"tooltipItemColor\":\"m_b30369b5\",\"tooltipItemBody\":\"m_50186d10\",\"tooltipItemName\":\"m_501dadf9\",\"tooltipItemData\":\"m_50192318\"};\n\nexport { classes as default };\n//# sourceMappingURL=ChartTooltip.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartTooltip.module.css';\n\nfunction updateChartTooltipPayload(payload: Record<string, any>[]): Record<string, any>[] {\n  return payload.map((item) => {\n    const newDataKey = item.name.split('.').pop();\n    return {\n      ...item,\n      name: newDataKey,\n    };\n  });\n}\n\nexport function getFilteredChartTooltipPayload(payload: Record<string, any>[], segmentId?: string) {\n  const duplicatesFilter = updateChartTooltipPayload(\n    payload.filter((item) => item.fill !== 'none' || !item.color)\n  );\n\n  if (!segmentId) {\n    return duplicatesFilter;\n  }\n\n  return duplicatesFilter.filter((item) => item.name === segmentId);\n}\n\nfunction getData(item: Record<string, any>, type: 'area' | 'radial' | 'scatter') {\n  if (type === 'radial' || type === 'scatter') {\n    if (Array.isArray(item.value)) {\n      return item.value[1] - item.value[0];\n    }\n    return item.value;\n  }\n\n  if (Array.isArray(item.payload[item.dataKey])) {\n    return item.payload[item.dataKey][1] - item.payload[item.dataKey][0];\n  }\n  return item.payload[item.dataKey];\n}\n\nexport type ChartTooltipStylesNames =\n  | 'tooltip'\n  | 'tooltipItem'\n  | 'tooltipItemBody'\n  | 'tooltipItemColor'\n  | 'tooltipItemName'\n  | 'tooltipItemData'\n  | 'tooltipLabel'\n  | 'tooltipBody';\n\nexport interface ChartTooltipProps\n  extends BoxProps,\n    StylesApiProps<ChartTooltipFactory>,\n    ElementProps<'div'> {\n  /** Main tooltip label */\n  label?: React.ReactNode;\n\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Data units, provided by parent component */\n  unit?: string;\n\n  /** Tooltip type that determines the content and styles, `area` for LineChart, AreaChart and BarChart, `radial` for DonutChart and PieChart, `'area'` by default */\n  type?: 'area' | 'radial' | 'scatter';\n\n  /** Id of the segment to display data for. Only applicable when `type=\"radial\"`. If not set, all data is rendered. */\n  segmentId?: string;\n\n  /** Chart series data, applicable only for `area` type */\n  series?: ChartSeries[];\n\n  /** A function to format values */\n  valueFormatter?: (value: number) => string;\n\n  /** Determines whether the color swatch should be visible, `true` by default */\n  showColor?: boolean;\n}\n\nexport type ChartTooltipFactory = Factory<{\n  props: ChartTooltipProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartTooltipStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartTooltipProps> = {\n  type: 'area',\n  showColor: true,\n};\n\nexport const ChartTooltip = factory<ChartTooltipFactory>((_props, ref) => {\n  const props = useProps('ChartTooltip', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    label,\n    unit,\n    type,\n    segmentId,\n    mod,\n    series,\n    valueFormatter,\n    showColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<ChartTooltipFactory>({\n    name: 'ChartTooltip',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartTooltipPayload(payload, segmentId);\n  const scatterLabel = type === 'scatter' ? payload[0]?.payload?.name : null;\n  const labels = getSeriesLabels(series);\n  const _label = label || scatterLabel;\n\n  const items = filteredPayload.map((item) => (\n    <div key={item?.key ?? item.name} data-type={type} {...getStyles('tooltipItem')}>\n      <div {...getStyles('tooltipItemBody')}>\n        {showColor && (\n          <ColorSwatch\n            color={getThemeColor(item.color, theme)}\n            size={12}\n            {...getStyles('tooltipItemColor')}\n            withShadow={false}\n          />\n        )}\n        <div {...getStyles('tooltipItemName')}>{labels[item.name] || item.name}</div>\n      </div>\n      <div {...getStyles('tooltipItemData')}>\n        {typeof valueFormatter === 'function'\n          ? valueFormatter(getData(item, type!))\n          : getData(item, type!)}\n        {unit || item.unit}\n      </div>\n    </div>\n  ));\n\n  return (\n    <Box {...getStyles('tooltip')} mod={[{ type }, mod]} ref={ref} {...others}>\n      {_label && <div {...getStyles('tooltipLabel')}>{_label}</div>}\n      <div {...getStyles('tooltipBody')}>{items}</div>\n    </Box>\n  );\n});\n\nChartTooltip.displayName = '@mantine/charts/ChartTooltip';\n", "'use client';\nvar classes = {\"legend\":\"m_847eaf\",\"legendItem\":\"m_17da7e62\",\"legendItemColor\":\"m_6e236e21\",\"legendItemName\":\"m_8ff56c0d\"};\n\nexport { classes as default };\n//# sourceMappingURL=ChartLegend.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartLegend.module.css';\n\nfunction updateChartLegendPayload(payload: Record<string, any>[]): Record<string, any>[] {\n  return payload.map((item) => {\n    const newDataKey = item.dataKey.split('.').pop();\n    return {\n      ...item,\n      dataKey: newDataKey,\n      payload: {\n        ...item.payload,\n        name: newDataKey,\n        dataKey: newDataKey,\n      },\n    };\n  });\n}\n\nexport function getFilteredChartLegendPayload(payload: Record<string, any>[]) {\n  return updateChartLegendPayload(payload.filter((item) => item.color !== 'none'));\n}\n\nexport type ChartLegendStylesNames = 'legendItem' | 'legendItemColor' | 'legendItemName' | 'legend';\n\nexport interface ChartLegendProps\n  extends BoxProps,\n    StylesApiProps<ChartLegendFactory>,\n    ElementProps<'div'> {\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Function called when mouse enters/leaves one of the legend items */\n  onHighlight: (area: string | null) => void;\n\n  /** Position of the legend relative to the chart, used to apply margin on the corresponding side */\n  legendPosition: 'top' | 'bottom' | 'middle';\n\n  /** Data used for labels, only applicable for area charts: AreaChart, LineChart, BarChart */\n  series?: ChartSeries[];\n\n  /** Determines whether color swatch should be shown next to the label, `true` by default */\n  showColor?: boolean;\n\n  /** Determines whether the legend should be centered, `false` by default */\n  centered?: boolean;\n}\n\nexport type ChartLegendFactory = Factory<{\n  props: ChartLegendProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartLegendStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartLegendProps> = {};\n\nexport const ChartLegend = factory<ChartLegendFactory>((_props, ref) => {\n  const props = useProps('ChartLegend', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    onHighlight,\n    legendPosition,\n    mod,\n    series,\n    showColor,\n    centered,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChartLegendFactory>({\n    name: 'ChartLegend',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartLegendPayload(payload);\n  const labels = getSeriesLabels(series);\n\n  const items = filteredPayload.map((item, index) => (\n    <div\n      key={index}\n      {...getStyles('legendItem')}\n      onMouseEnter={() => onHighlight(item.dataKey)}\n      onMouseLeave={() => onHighlight(null)}\n      data-without-color={showColor === false || undefined}\n    >\n      <ColorSwatch\n        color={item.color}\n        size={12}\n        {...getStyles('legendItemColor')}\n        withShadow={false}\n      />\n      <p {...getStyles('legendItemName')}>{labels[item.dataKey] || item.dataKey}</p>\n    </div>\n  ));\n\n  return (\n    <Box\n      ref={ref}\n      mod={[{ position: legendPosition, centered }, mod]}\n      {...getStyles('legend')}\n      {...others}\n    >\n      {items}\n    </Box>\n  );\n});\n\nChartLegend.displayName = '@mantine/charts/ChartLegend';\n", "interface AreaGradientProps {\n  color: string;\n  id: string;\n  withGradient: boolean | undefined;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaGradient({ color, id, withGradient, fillOpacity }: AreaGradientProps) {\n  return (\n    <>\n      {withGradient ? (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor={color} stopOpacity={fillOpacity} />\n          <stop offset=\"100%\" stopColor={color} stopOpacity={0.01} />\n        </linearGradient>\n      ) : (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop stopColor={color} stopOpacity={fillOpacity ?? 0.2} />\n        </linearGradient>\n      )}\n    </>\n  );\n}\n\nAreaGradient.displayName = '@mantine/charts/AreaGradient';\n", "import { getThemeColor, MantineColor, useMantineTheme } from '@mantine/core';\n\ninterface AreaSplitProps {\n  offset: number;\n  colors: [MantineColor, MantineColor];\n  id?: string;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaSplit({ offset, id, colors, fillOpacity }: AreaSplitProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[0], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[1], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n    </linearGradient>\n  );\n}\n\nAreaSplit.displayName = '@mantine/charts/AreaSplit';\n", "import type { ChartData } from '../types';\nimport type { AreaChartSeries } from './AreaChart';\n\ninterface GetSplitOffsetInput {\n  data: ChartData;\n  dataKey: string;\n}\n\nexport function getSplitOffset({ data, dataKey }: GetSplitOffsetInput) {\n  const dataMax = Math.max(...data.map((item) => item[dataKey]));\n  const dataMin = Math.min(...data.map((item) => item[dataKey]));\n\n  if (dataMax <= 0) {\n    return 0;\n  }\n  if (dataMin >= 0) {\n    return 1;\n  }\n\n  return dataMax / (dataMax - dataMin);\n}\n\ninterface GetDefaultSplitOffsetInput {\n  data: ChartData;\n  series: AreaChartSeries[];\n}\n\nexport function getDefaultSplitOffset({ data, series }: GetDefaultSplitOffsetInput) {\n  if (series.length === 1) {\n    const dataKey = series[0].name;\n    return getSplitOffset({ data, dataKey });\n  }\n\n  return 0.5;\n}\n", "'use client';\nvar classes = {\"root\":\"m_a50f3e58\",\"container\":\"m_af9188cb\",\"grid\":\"m_a50a48bc\",\"axis\":\"m_a507a517\",\"axisLabel\":\"m_2293801d\",\"tooltip\":\"m_92b296cd\"};\n\nexport { classes as default };\n//# sourceMappingURL=grid-chart.module.css.mjs.map\n", "import { Fragment, useId, useState } from 'react';\nimport {\n  Area,\n  AreaProps,\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  AreaChart as ReChartsAreaChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport { AreaGradient } from './AreaGradient';\nimport { AreaSplit } from './AreaSplit';\nimport { getDefaultSplitOffset } from './get-split-offset';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface AreaChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n  color: MantineColor;\n}\n\nexport type AreaChartType = 'default' | 'stacked' | 'percent' | 'split';\n\nexport type AreaChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport type AreaChartStylesNames =\n  | 'area'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type AreaChartCSSVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface AreaChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<AreaChartFactory>,\n    ElementProps<'div'> {\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: AreaChartSeries[];\n\n  /** Controls how chart areas are positioned relative to each other, `'default'` by default */\n  type?: AreaChartType;\n\n  /** Determines whether the chart area should be represented with a gradient instead of the solid color, `false` by default */\n  withGradient?: boolean;\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart areas, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `AreaChart` component */\n  areaChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsAreaChart>;\n\n  /** Controls fill opacity of all areas, `0.2` by default */\n  fillOpacity?: number;\n\n  /** A tuple of colors used when `type=\"split\"` is set, ignored in all other cases. A tuple may include theme colors reference or any valid CSS colors `['green.7', 'red.7']` by default. */\n  splitColors?: [MantineColor, MantineColor];\n\n  /** Offset for the split gradient. By default, value is inferred from `data` and `series` if possible. Must be generated from the data array with `getSplitOffset` function. */\n  splitOffset?: number;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Area` component */\n  areaProps?:\n    | ((series: AreaChartSeries) => Partial<Omit<AreaProps, 'ref'>>)\n    | Partial<Omit<AreaProps, 'ref'>>;\n}\n\nexport type AreaChartFactory = Factory<{\n  props: AreaChartProps;\n  ref: HTMLDivElement;\n  stylesNames: AreaChartStylesNames;\n  vars: AreaChartCSSVariables;\n}>;\n\nconst defaultProps: Partial<AreaChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withDots: true,\n  withTooltip: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 0.2,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  curveType: 'monotone',\n  gridAxis: 'x',\n  type: 'default',\n  splitColors: ['green.7', 'red.7'],\n  orientation: 'horizontal',\n};\n\nconst varsResolver = createVarsResolver<AreaChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const AreaChart = factory<AreaChartFactory>((_props, ref) => {\n  const props = useProps('AreaChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    withGradient,\n    dataKey,\n    withXAxis,\n    withYAxis,\n    curveType,\n    gridProps,\n    withDots,\n    tickLine,\n    strokeDasharray,\n    gridAxis,\n    unit,\n    yAxisProps,\n    xAxisProps,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    tooltipAnimationDuration,\n    type,\n    legendProps,\n    tooltipProps,\n    withLegend,\n    withTooltip,\n    areaChartProps,\n    fillOpacity,\n    splitColors,\n    splitOffset,\n    connectNulls,\n    onMouseLeave,\n    orientation,\n    referenceLines,\n    dir,\n    valueFormatter,\n    children,\n    areaProps,\n    xAxisLabel,\n    yAxisLabel,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const baseId = useId();\n  const splitId = `${baseId}-split`;\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const isAnimationActive = (tooltipAnimationDuration || 0) > 0;\n  const _withGradient = typeof withGradient === 'boolean' ? withGradient : type === 'default';\n  const stacked = type === 'stacked' || type === 'percent';\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<AreaChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<AreaChartFactory>({\n    name: 'AreaChart',\n    classes: classes as any,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const dotsAreas = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Area\n        {...getStyles('area')}\n        activeDot={{ fill: theme.white, stroke: color, strokeWidth: 2, r: 4, ...activeDotProps }}\n        dot={{ fill: color, fillOpacity: dimmed ? 0 : 1, strokeWidth: 2, r: 4, ...dotProps }}\n        key={item.name}\n        name={item.name}\n        type={curveType}\n        dataKey={item.name}\n        fill=\"none\"\n        strokeWidth={strokeWidth}\n        stroke=\"none\"\n        isAnimationActive={false}\n        connectNulls={connectNulls}\n        stackId={stacked ? 'stack-dots' : undefined}\n        yAxisId={item.yAxisId || 'left'}\n        {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n      />\n    );\n  });\n\n  const areas = series.map((item) => {\n    const id = `${baseId}-${item.color.replace(/[^a-zA-Z0-9]/g, '')}`;\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Fragment key={item.name}>\n        <defs>\n          <AreaGradient\n            color={color}\n            withGradient={_withGradient}\n            id={id}\n            fillOpacity={fillOpacity}\n          />\n        </defs>\n        <Area\n          {...getStyles('area')}\n          activeDot={false}\n          dot={false}\n          name={item.name}\n          type={curveType}\n          dataKey={item.name}\n          fill={type === 'split' ? `url(#${splitId})` : `url(#${id})`}\n          strokeWidth={strokeWidth}\n          stroke={color}\n          isAnimationActive={false}\n          connectNulls={connectNulls}\n          stackId={stacked ? 'stack' : undefined}\n          fillOpacity={dimmed ? 0 : 1}\n          strokeOpacity={dimmed ? 0.5 : 1}\n          strokeDasharray={item.strokeDasharray}\n          yAxisId={item.yAxisId || 'left'}\n          {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n        />\n      </Fragment>\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: type === 'percent' ? valueToPercent : valueFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsAreaChart\n          data={data}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...areaChartProps}\n        >\n          {referenceLinesItems}\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={isAnimationActive}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {type === 'split' && (\n            <defs>\n              <AreaSplit\n                colors={splitColors!}\n                id={splitId}\n                offset={splitOffset ?? getDefaultSplitOffset({ data: data!, series })}\n                fillOpacity={fillOpacity}\n              />\n            </defs>\n          )}\n\n          {areas}\n          {withDots && dotsAreas}\n          {children}\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nAreaChart.classes = classes;\nAreaChart.displayName = '@mantine/charts/AreaChart';\n", "import { useState } from 'react';\nimport {\n  Bar,\n  BarProps,\n  CartesianGrid,\n  Cell,\n  Label,\n  Legend,\n  BarChart as ReChartsBarChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface BarChartSeries extends ChartSeries {}\n\nexport type BarChartType = 'default' | 'stacked' | 'percent' | 'waterfall';\n\nexport type BarChartStylesNames =\n  | 'bar'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type BarChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color' | '--chart-cursor-fill';\n};\n\nexport interface BarChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<BarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart. */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: BarChartSeries[];\n\n  /** Controls how bars are positioned relative to each other, `'default'` by default */\n  type?: BarChartType;\n\n  /** Controls fill opacity of all bars, `1` by default */\n  fillOpacity?: number;\n\n  /** Fill of hovered bar section, by default value is based on color scheme */\n  cursorFill?: MantineColor;\n\n  /** Props passed down to recharts `BarChart` component */\n  barChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsBarChart>;\n\n  /** Additional components that are rendered inside recharts `BarChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Bar` component */\n  barProps?:\n    | ((series: BarChartSeries) => Partial<Omit<BarProps, 'ref'>>)\n    | Partial<Omit<BarProps, 'ref'>>;\n\n  /** Determines whether a label with bar value should be displayed on top of each bar, incompatible with `type=\"stacked\"` and `type=\"percent\"`, `false` by default */\n  withBarValueLabel?: boolean;\n}\n\nexport type BarChartFactory = Factory<{\n  props: BarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: BarChartStylesNames;\n  vars: BarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<BarChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  type: 'default',\n};\n\nconst varsResolver = createVarsResolver<BarChartFactory>(\n  (theme, { textColor, gridColor, cursorFill }) => ({\n    root: {\n      '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n      '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n      '--chart-cursor-fill': cursorFill ? getThemeColor(cursorFill, theme) : undefined,\n    },\n  })\n);\n\nfunction BarLabel({ value, valueFormatter, ...others }: Record<string, any>) {\n  return (\n    <text\n      {...others}\n      dy={-10}\n      fontSize={12}\n      fill=\"var(--chart-text-color, var(--mantine-color-dimmed))\"\n      textAnchor=\"center\"\n    >\n      {typeof valueFormatter === 'function' ? valueFormatter(value) : value}\n    </text>\n  );\n}\n\nfunction calculateCumulativeTotal(waterfallData: Record<string, any>[], dataKey: string) {\n  let start: number = 0;\n  let end: number = 0;\n  return waterfallData.map((item) => {\n    if (item.standalone) {\n      for (const prop in item) {\n        if (typeof item[prop] === 'number' && prop !== dataKey) {\n          item[prop] = [0, item[prop]];\n        }\n      }\n    } else {\n      for (const prop in item) {\n        if (typeof item[prop] === 'number' && prop !== dataKey) {\n          end += item[prop];\n          item[prop] = [start, end];\n          start = end;\n        }\n      }\n    }\n    return item;\n  });\n}\n\nexport const BarChart = factory<BarChartFactory>((_props, ref) => {\n  const props = useProps('BarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    fillOpacity,\n    barChartProps,\n    type,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    barProps,\n    xAxisLabel,\n    yAxisLabel,\n    withBarValueLabel,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const stacked = type === 'stacked' || type === 'percent';\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<BarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const inputData = type === 'waterfall' ? calculateCumulativeTotal(data, dataKey) : data;\n\n  const getStyles = useStyles<BarChartFactory>({\n    name: 'BarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const bars = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Bar\n        {...getStyles('bar')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        fill={color}\n        stroke={color}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : fillOpacity}\n        strokeOpacity={dimmed ? 0.2 : 0}\n        stackId={stacked ? 'stack' : undefined}\n        label={withBarValueLabel ? <BarLabel valueFormatter={valueFormatter} /> : undefined}\n        yAxisId={item.yAxisId || 'left'}\n        {...(typeof barProps === 'function' ? barProps(item) : barProps)}\n      >\n        {inputData.map((entry, index) => (\n          <Cell\n            key={`cell-${index}`}\n            fill={entry.color ? getThemeColor(entry.color, theme) : color}\n          />\n        ))}\n      </Bar>\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: type === 'percent' ? valueToPercent : valueFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsBarChart\n          data={inputData}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...barChartProps}\n        >\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  showColor={type !== 'waterfall'}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n                fill: 'var(--chart-cursor-fill)',\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  type={type === 'waterfall' ? 'scatter' : undefined}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {bars}\n          {referenceLinesItems}\n          {children}\n        </ReChartsBarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nBarChart.displayName = '@mantine/charts/BarChart';\nBarChart.classes = classes;\n", "import { useState } from 'react';\nimport {\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  Line,\n  LineProps,\n  LineChart as ReChartsLineChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { useId } from '@mantine/hooks';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport type LineChartType = 'default' | 'gradient';\n\nexport interface LineChartGradientStop {\n  offset: number;\n  color: MantineColor;\n}\n\nexport type LineChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport interface LineChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n}\n\nexport type LineChartStylesNames =\n  | 'line'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type LineChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface LineChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<LineChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: LineChartSeries[];\n\n  /** Controls styles of the line, `'default'` by default */\n  type?: LineChartType;\n\n  /** Data used to generate gradient stops, `[{ offset: 0, color: 'red' }, { offset: 100, color: 'blue' }]` by default */\n  gradientStops?: LineChartGradientStop[];\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: LineChartCurveType;\n\n  /** Controls fill opacity of all lines, `1` by default */\n  fillOpacity?: number;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart lines, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `LineChart` component */\n  lineChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsLineChart>;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Area` component */\n  lineProps?:\n    | ((series: LineChartSeries) => Partial<Omit<LineProps, 'ref'>>)\n    | Partial<Omit<LineProps, 'ref'>>;\n}\n\nexport type LineChartFactory = Factory<{\n  props: LineChartProps;\n  ref: HTMLDivElement;\n  stylesNames: LineChartStylesNames;\n  vars: LineChartCssVariables;\n}>;\n\nconst defaultProps: Partial<LineChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  withDots: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  curveType: 'monotone',\n  gradientStops: [\n    { offset: 0, color: 'red' },\n    { offset: 100, color: 'blue' },\n  ],\n};\n\nconst varsResolver = createVarsResolver<LineChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const LineChart = factory<LineChartFactory>((_props, ref) => {\n  const props = useProps('LineChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    withDots,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    lineChartProps,\n    connectNulls,\n    fillOpacity,\n    curveType,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    lineProps,\n    xAxisLabel,\n    yAxisLabel,\n    type,\n    gradientStops,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<LineChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<LineChartFactory>({\n    name: 'LineChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const id = useId();\n  const gradientId = `line-chart-gradient-${id}`;\n  const stops = gradientStops?.map((stop) => (\n    <stop\n      key={stop.color}\n      offset={`${stop.offset}%`}\n      stopColor={getThemeColor(stop.color, theme)}\n    />\n  ));\n\n  const lines = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Line\n        {...getStyles('line')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        dot={\n          withDots\n            ? {\n                fillOpacity: dimmed ? 0 : 1,\n                strokeOpacity: dimmed ? 0 : 1,\n                strokeWidth: 1,\n                fill: type === 'gradient' ? 'var(--mantine-color-gray-7)' : color,\n                stroke: type === 'gradient' ? 'white' : color,\n                ...dotProps,\n              }\n            : false\n        }\n        activeDot={\n          withDots\n            ? {\n                fill: type === 'gradient' ? 'var(--mantine-color-gray-7)' : color,\n                stroke: type === 'gradient' ? 'white' : color,\n                ...activeDotProps,\n              }\n            : false\n        }\n        fill={color}\n        stroke={type === 'gradient' ? `url(#${gradientId})` : color}\n        strokeWidth={strokeWidth}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0 : fillOpacity}\n        strokeOpacity={dimmed ? 0.5 : fillOpacity}\n        connectNulls={connectNulls}\n        type={curveType}\n        strokeDasharray={item.strokeDasharray}\n        yAxisId={item.yAxisId || 'left'}\n        {...(typeof lineProps === 'function' ? lineProps(item) : lineProps)}\n      />\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: valueFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsLineChart\n          data={data}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...lineChartProps}\n        >\n          {type === 'gradient' && (\n            <defs>\n              <linearGradient id={gradientId} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                {stops}\n              </linearGradient>\n            </defs>\n          )}\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  showColor={type !== 'gradient'}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                  showColor={type !== 'gradient'}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {lines}\n          {referenceLinesItems}\n          {children}\n        </ReChartsLineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nLineChart.displayName = '@mantine/charts/LineChart';\nLineChart.classes = classes;\n", "import { useId, useMemo } from 'react';\nimport { Area, AreaProps, AreaChart as ReChartsAreaChart, ResponsiveContainer } from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { AreaChartCurveType, AreaGradient } from '../AreaChart';\n\nconst classes = {};\n\nexport interface SparklineTrendColors {\n  positive: MantineColor;\n  negative: MantineColor;\n  neutral?: MantineColor;\n}\n\nexport type SparklineStylesNames = 'root';\nexport type SparklineCssVariables = {\n  root: '--chart-color';\n};\n\nexport interface SparklineProps\n  extends BoxProps,\n    StylesApiProps<SparklineFactory>,\n    ElementProps<'div'> {\n  /** Data used to render the chart */\n  data: (number | null)[];\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Determines whether the chart fill should be a gradient, `true` by default */\n  withGradient?: boolean;\n\n  /** Controls fill opacity of the area, `0.6` by default */\n  fillOpacity?: number;\n\n  /** Type of the curve, `'linear'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Area stroke width, `2` by default */\n  strokeWidth?: number;\n\n  /** If set, `color` prop is ignored and chart color is determined by the difference between first and last value. */\n  trendColors?: SparklineTrendColors;\n\n  /** Determines whether null values should be connected with other values, `true` by default */\n  connectNulls?: boolean;\n\n  /** Props passed down to the underlying recharts `Area` component */\n  areaProps?: Omit<AreaProps, 'data' | 'dataKey' | 'ref'>;\n}\n\nexport type SparklineFactory = Factory<{\n  props: SparklineProps;\n  ref: HTMLDivElement;\n  stylesNames: SparklineStylesNames;\n  vars: SparklineCssVariables;\n}>;\n\nconst defaultProps: Partial<SparklineProps> = {\n  withGradient: true,\n  connectNulls: true,\n  fillOpacity: 0.6,\n  strokeWidth: 2,\n  curveType: 'linear',\n};\n\nfunction getTrendColor(data: (number | null)[], trendColors: SparklineTrendColors) {\n  const first = data[0];\n  const last = data[data.length - 1];\n\n  if (first === null || last === null) {\n    return trendColors.neutral || trendColors.positive;\n  }\n\n  if (first < last) {\n    return trendColors.positive;\n  }\n\n  if (first > last) {\n    return trendColors.negative;\n  }\n\n  return trendColors.neutral || trendColors.positive;\n}\n\nconst varsResolver = createVarsResolver<SparklineFactory>(\n  (theme, { color, data, trendColors }) => ({\n    root: {\n      '--chart-color': trendColors\n        ? getThemeColor(getTrendColor(data, trendColors), theme)\n        : color\n          ? getThemeColor(color, theme)\n          : undefined,\n    },\n  })\n);\n\nexport const Sparkline = factory<SparklineFactory>((_props, ref) => {\n  const props = useProps('Sparkline', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withGradient,\n    fillOpacity,\n    curveType,\n    strokeWidth,\n    trendColors,\n    connectNulls,\n    areaProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SparklineFactory>({\n    name: 'Sparkline',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const id = useId();\n  const mappedData = useMemo(() => data.map((value, index) => ({ value, index })), [data]);\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others} dir=\"ltr\">\n      <ResponsiveContainer>\n        <ReChartsAreaChart data={mappedData}>\n          <Area\n            dataKey=\"value\"\n            type={curveType}\n            fill={`url(#${id})`}\n            stroke=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n            isAnimationActive={false}\n            connectNulls={connectNulls}\n            strokeWidth={strokeWidth}\n            fillOpacity={1}\n            {...areaProps}\n          />\n\n          <defs>\n            <AreaGradient\n              id={id}\n              color=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n              fillOpacity={fillOpacity}\n              withGradient={withGradient}\n            />\n          </defs>\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nSparkline.displayName = '@mantine/charts/Sparkline';\nSparkline.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_a410e613\",\"label\":\"m_ddb0bfe3\"};\n\nexport { classes as default };\n//# sourceMappingURL=DonutChart.module.css.mjs.map\n", "import {\n  Cell,\n  Pie,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './DonutChart.module.css';\n\nexport interface DonutChartCell {\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type DonutChartStylesNames = 'root' | 'label';\nexport type DonutChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface DonutChartProps\n  extends BoxProps,\n    StylesApiProps<DonutChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: DonutChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Omit<PieProps, 'ref'>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, by default depends on color scheme */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls thickness of the chart segments, `20` by default */\n  thickness?: number;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Chart label, displayed in the center of the chart */\n  chartLabel?: string | number;\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type DonutChartFactory = Factory<{\n  props: DonutChartProps;\n  ref: HTMLDivElement;\n  stylesNames: DonutChartStylesNames;\n  vars: DonutChartCssVariables;\n}>;\n\nconst defaultProps: Partial<DonutChartProps> = {\n  withTooltip: true,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  thickness: 20,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  tooltipDataSource: 'all',\n};\n\nconst varsResolver = createVarsResolver<DonutChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nexport const DonutChart = factory<DonutChartFactory>((_props, ref) => {\n  const props = useProps('DonutChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    thickness,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    chartLabel,\n    children,\n    pieChartProps,\n    valueFormatter,\n    strokeColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<DonutChartFactory>({\n    name: 'DonutChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DonutChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={size! / 2 - thickness!}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={\n              withLabels\n                ? {\n                    fill: 'var(--chart-labels-color, var(--mantine-color-dimmed))',\n                    fontSize: 12,\n                    fontFamily: 'var(--mantine-font-family)',\n                  }\n                : false\n            }\n            labelLine={\n              withLabelsLine\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {chartLabel && (\n            <text\n              x=\"50%\"\n              y=\"50%\"\n              textAnchor=\"middle\"\n              dominantBaseline=\"middle\"\n              {...getStyles('label')}\n            >\n              {chartLabel}\n            </text>\n          )}\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nDonutChart.displayName = '@mantine/charts/DonutChart';\nDonutChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_cd8943fd\",\"label\":\"m_e3441f39\"};\n\nexport { classes as default };\n//# sourceMappingURL=PieChart.module.css.mjs.map\n", "import {\n  Cell,\n  Pie,\n  PieLabel,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './PieChart.module.css';\n\nexport interface PieChartCell {\n  key?: string | number;\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type PieChartStylesNames = 'root';\nexport type PieChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface PieChartProps\n  extends BoxProps,\n    StylesApiProps<PieChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: PieChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Omit<PieProps, 'ref'>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, white by default */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** Controls labels position relative to the segment, `'outside'` by default */\n  labelsPosition?: 'inside' | 'outside';\n\n  /** Type of labels to display, `'value'` by default */\n  labelsType?: 'value' | 'percent';\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type PieChartFactory = Factory<{\n  props: PieChartProps;\n  ref: HTMLDivElement;\n  stylesNames: PieChartStylesNames;\n  vars: PieChartCssVariables;\n}>;\n\nconst defaultProps: Partial<PieChartProps> = {\n  withTooltip: false,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  tooltipDataSource: 'all',\n  labelsPosition: 'outside',\n  labelsType: 'value',\n};\n\nconst varsResolver = createVarsResolver<PieChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size, labelsPosition }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels && labelsPosition === 'outside' ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nconst getInsideLabel =\n  (labelsType: 'value' | 'percent', valueFormatter?: PieChartProps['valueFormatter']): PieLabel =>\n  ({ cx, cy, midAngle, innerRadius, outerRadius, value, percent }) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className={classes.label}\n      >\n        {labelsType === 'percent'\n          ? `${(percent * 100).toFixed(0)}%`\n          : typeof valueFormatter === 'function'\n            ? valueFormatter(value)\n            : value}\n      </text>\n    );\n  };\n\nexport const PieChart = factory<PieChartFactory>((_props, ref) => {\n  const props = useProps('PieChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    children,\n    pieChartProps,\n    labelsPosition,\n    valueFormatter,\n    labelsType,\n    strokeColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<PieChartFactory>({\n    name: 'PieChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<PieChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={0}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={\n              withLabels\n                ? labelsPosition === 'inside'\n                  ? getInsideLabel(labelsType || 'value', valueFormatter)\n                  : labelsType === 'percent'\n                    ? ({ percent, x, y, cx, cy }) => (\n                        <text\n                          x={x}\n                          y={y}\n                          cx={cx}\n                          cy={cy}\n                          textAnchor={x > cx ? 'start' : 'end'}\n                          dominantBaseline=\"central\"\n                          fill=\"var(--chart-labels-color, var(--mantine-color-dimmed))\"\n                          fontFamily=\"var(--mantine-font-family)\"\n                          fontSize={12}\n                        >\n                          <tspan x={x}>{`${(percent * 100).toFixed(0)}%`}</tspan>\n                        </text>\n                      )\n                    : {\n                        fill: 'var(--chart-labels-color, var(--mantine-color-dimmed))',\n                        fontSize: 12,\n                        fontFamily: 'var(--mantine-font-family)',\n                      }\n                : false\n            }\n            labelLine={\n              withLabelsLine && labelsPosition === 'outside'\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nPieChart.displayName = '@mantine/charts/PieChart';\nPieChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_1f271cf7\",\"container\":\"m_cf06f58c\"};\n\nexport { classes as default };\n//# sourceMappingURL=RadarChart.module.css.mjs.map\n", "import { useState } from 'react';\nimport {\n  Legend,\n  LegendProps,\n  PolarAngleAxis,\n  PolarAngleAxisProps,\n  PolarGrid,\n  PolarGridProps,\n  PolarRadiusAxis,\n  PolarRadiusAxisProps,\n  Radar,\n  RadarProps,\n  RadarChart as ReChartsRadarChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend } from '../ChartLegend';\nimport classes from './RadarChart.module.css';\n\nexport interface RadarChartSeries {\n  name: string;\n  color: MantineColor;\n  strokeColor?: MantineColor;\n  opacity?: number;\n}\n\nexport type RadarChartStylesNames = 'root' | 'container';\nexport type RadarChartCssVariables = {\n  root: '--chart-grid-color' | '--chart-text-color';\n};\n\nexport interface RadarChartProps\n  extends BoxProps,\n    StylesApiProps<RadarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used in the chart */\n  data: Record<string, any>[];\n\n  /** Determines which data should be consumed from the `data` array. */\n  series: RadarChartSeries[];\n\n  /** Key of the `data` object for axis values */\n  dataKey: string;\n\n  /** Controls color of the grid lines. By default, color depends on the color scheme. */\n  gridColor?: MantineColor;\n\n  /** Controls color of all text elements. By default, color depends on the color scheme. */\n  textColor?: MantineColor;\n\n  /** Determines whether PolarGrid component should be displayed, `true` by default. */\n  withPolarGrid?: boolean;\n\n  /** Determines whether PolarAngleAxis component should be displayed, `true` by default */\n  withPolarAngleAxis?: boolean;\n\n  /** Determines whether PolarRadiusAxisProps component should be displayed, `false` by default */\n  withPolarRadiusAxis?: boolean;\n\n  /** Props passed down to recharts Radar component */\n  radarProps?: ((series: RadarChartSeries) => Omit<RadarProps, 'ref'>) | Omit<RadarProps, 'ref'>;\n\n  /** Props passed down to recharts RadarChart component */\n  radarChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsRadarChart>;\n\n  /** Props passed down to recharts PolarGrid component */\n  polarGridProps?: Omit<PolarGridProps, 'ref'>;\n\n  /** Props passed down to recharts PolarAngleAxis component */\n  polarAngleAxisProps?: Omit<PolarAngleAxisProps, 'ref'>;\n\n  /** Props passed down to recharts PolarRadiusAxis component */\n  polarRadiusAxisProps?: Omit<PolarRadiusAxisProps, 'ref'>;\n\n  /** Props passed down to recharts Legend component */\n  legendProps?: Omit<LegendProps, 'ref'>;\n\n  /** Determines whether the legend should be displayed, `false` by default */\n  withLegend?: boolean;\n\n  /** Additional components that are rendered inside recharts `RadarChart` component */\n  children?: React.ReactNode;\n}\n\nexport type RadarChartFactory = Factory<{\n  props: RadarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: RadarChartStylesNames;\n  vars: RadarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<RadarChartProps> = {\n  withPolarGrid: true,\n  withPolarAngleAxis: true,\n  withPolarRadiusAxis: false,\n};\n\nconst varsResolver = createVarsResolver<RadarChartFactory>((theme, { gridColor, textColor }) => ({\n  root: {\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n  },\n}));\n\nexport const RadarChart = factory<RadarChartFactory>((_props, ref) => {\n  const props = useProps('RadarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    dataKey,\n    gridColor,\n    textColor,\n    radarProps,\n    radarChartProps,\n    polarGridProps,\n    polarAngleAxisProps,\n    polarRadiusAxisProps,\n    withPolarGrid,\n    withPolarAngleAxis,\n    withPolarRadiusAxis,\n    children,\n    withLegend,\n    legendProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<RadarChartFactory>({\n    name: 'RadarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<RadarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const radars = series.map((item, index) => (\n    <Radar\n      key={index}\n      name={item.name}\n      dataKey={item.name}\n      stroke={getThemeColor(item.strokeColor || item.color, theme)}\n      fill={getThemeColor(item.color, theme)}\n      fillOpacity={\n        highlightedArea\n          ? highlightedArea === item.name\n            ? item.opacity || 0.4\n            : 0.05\n          : item.opacity || 0.4\n      }\n      strokeOpacity={highlightedArea ? (highlightedArea === item.name ? 1 : 0.1) : 1}\n      isAnimationActive={false}\n      {...(typeof radarProps === 'function' ? radarProps(item) : radarProps)}\n    />\n  ));\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsRadarChart data={data} {...radarChartProps}>\n          {withPolarGrid && <PolarGrid stroke=\"var(--chart-grid-color)\" {...polarGridProps} />}\n          {withPolarAngleAxis && <PolarAngleAxis dataKey={dataKey} {...polarAngleAxisProps} />}\n          {withPolarRadiusAxis && (\n            <PolarRadiusAxis stroke=\"var(--chart-grid-color)\" {...polarRadiusAxisProps} />\n          )}\n          {radars}\n          {withLegend && (\n            <Legend\n              verticalAlign=\"bottom\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'bottom'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  centered\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n          {children}\n        </ReChartsRadarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nRadarChart.displayName = '@mantine/charts/RadarChart';\nRadarChart.classes = classes;\n", "import { useState } from 'react';\nimport {\n  CartesianGrid,\n  Label,\n  Legend,\n  ScatterChart as ReChartsScatterChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Scatter,\n  ScatterProps,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { BaseChartStylesNames, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport interface ScatterChartSeries {\n  color: MantineColor;\n  name: string;\n  data: Record<string, number>[];\n}\n\nexport type ScatterChartStylesNames =\n  | 'scatter'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type ScatterChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface ScatterChartProps\n  extends Omit<GridChartBaseProps, 'dataKey' | 'data' | 'unit' | 'valueFormatter'>,\n    BoxProps,\n    StylesApiProps<ScatterChartFactory>,\n    ElementProps<'div'> {\n  /** Keys that should be used to retrieve data from the data array on x and y axis */\n  dataKey: { x: string; y: string };\n\n  /** Data that is used to build the chart */\n  data: ScatterChartSeries[];\n\n  /** Units displayed after value on axis and inside the tooltip */\n  unit?: { x?: string; y?: string };\n\n  /** Labels that should be used instead of keys names in the tooltip */\n  labels?: { x?: string; y?: string };\n\n  /** A function to format values on x/y axis and in the tooltip */\n  valueFormatter?:\n    | GridChartBaseProps['valueFormatter']\n    | { x?: GridChartBaseProps['valueFormatter']; y?: GridChartBaseProps['valueFormatter'] };\n\n  /** Props passed down to recharts `ScatterChart` component */\n  scatterChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsScatterChart>;\n\n  /** Props passed down to recharts `Scatter` component */\n  scatterProps?: Omit<ScatterProps, 'ref'>;\n}\n\nfunction getAxis(key: string, dataKey: { x: string; y: string }) {\n  return key === dataKey.x ? 'x' : 'y';\n}\n\nexport type ScatterChartFactory = Factory<{\n  props: ScatterChartProps;\n  ref: HTMLDivElement;\n  stylesNames: ScatterChartStylesNames;\n  vars: ScatterChartCssVariables;\n}>;\n\nconst defaultProps: Partial<ScatterChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n};\n\nconst varsResolver = createVarsResolver<ScatterChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const ScatterChart = factory<ScatterChartFactory>((_props, ref) => {\n  const props = useProps('ScatterChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    referenceLines,\n    dir,\n    withLegend,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    xAxisProps,\n    yAxisProps,\n    orientation,\n    scatterChartProps,\n    legendProps,\n    data,\n    gridAxis,\n    tickLine,\n    strokeDasharray,\n    gridProps,\n    tooltipAnimationDuration,\n    tooltipProps,\n    children,\n    onMouseLeave,\n    dataKey,\n    textColor,\n    gridColor,\n    xAxisLabel,\n    yAxisLabel,\n    unit,\n    labels,\n    valueFormatter,\n    scatterProps,\n    ...others\n  } = props;\n\n  const getFormatter = (axis: 'x' | 'y') =>\n    typeof valueFormatter === 'function' ? valueFormatter : valueFormatter?.[axis];\n  const xFormatter = getFormatter('x');\n  const yFormatter = getFormatter('y');\n\n  const theme = useMantineTheme();\n\n  const mappedData = data.map((item) => ({\n    ...item,\n    data: item.data.map((point) => ({ ...point, name: item.name })),\n  }));\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<ScatterChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<ScatterChartFactory>({\n    name: 'ScatterChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const scatters = mappedData.map((item, index) => {\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Scatter\n        data={item.data}\n        fill={getThemeColor(item.color, theme)}\n        key={index}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : 1}\n        {...scatterProps}\n      />\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsScatterChart\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...scatterChartProps}\n        >\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n          <XAxis\n            type=\"number\"\n            hide={!withXAxis}\n            dataKey={dataKey.x}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            unit={unit?.x}\n            tickFormatter={xFormatter}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            hide={!withYAxis}\n            axisLine={false}\n            dataKey={dataKey.y}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit?.y}\n            tickFormatter={yFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  type=\"scatter\"\n                  label={label}\n                  payload={\n                    labels\n                      ? payload?.map((item) => ({\n                          ...item,\n                          name: labels[getAxis(item.name, dataKey)] || item.name,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                      : payload?.map((item) => ({\n                          ...item,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                  }\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload?.map((item, index) => ({\n                    ...item,\n                    dataKey: data[index].name,\n                  }))}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              height={44}\n              {...legendProps}\n            />\n          )}\n\n          {referenceLinesItems}\n          {scatters}\n        </ReChartsScatterChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nScatterChart.displayName = '@mantine/charts/ScatterChart';\nScatterChart.classes = classes;\n", "import {\n  ResponsiveContainer,\n  Scatter,\n  ScatterChart,\n  ScatterProps,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  XAxisProps,\n  YAxis,\n  YAxisProps,\n  ZAxis,\n  ZAxisProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  GetStylesApi,\n  getThemeColor,\n  Group,\n  MantineColor,\n  StylesApiProps,\n  Text,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from '../grid-chart.module.css';\n\nfunction getDomain(data: Record<string, any>[], key: string) {\n  const values = data.map((item) => item[key]);\n  return [Math.min(...values), Math.max(...values)];\n}\n\ninterface BubbleChartTooltipProps {\n  payload: any;\n  active: boolean | undefined;\n  getStyles: GetStylesApi<BubbleChartFactory>;\n  valueFormatter?: (value: number) => string;\n  dataKey: BubbleChartDataKey;\n}\n\nfunction BubbleChartTooltip({\n  active,\n  payload,\n  getStyles,\n  dataKey,\n  valueFormatter,\n}: BubbleChartTooltipProps) {\n  if (active && payload && payload.length) {\n    const data = payload[0] && payload[0].payload;\n\n    return (\n      <div {...getStyles('tooltip')}>\n        <Group justify=\"space-between\">\n          <Text fz=\"sm\">{data[dataKey.x]}</Text>\n          <Text fz=\"sm\">{valueFormatter ? valueFormatter(data[dataKey.z]) : data[dataKey.z]}</Text>\n        </Group>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport type BubbleChartStylesNames = 'root' | 'axis' | 'tooltip';\nexport type BubbleChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface BubbleChartDataKey {\n  x: string;\n  y: string;\n  z: string;\n}\n\nexport interface BubbleChartProps\n  extends BoxProps,\n    StylesApiProps<BubbleChartFactory>,\n    ElementProps<'div'> {\n  /** Chart data */\n  data: Record<string, any>[];\n\n  /** Data keys for x, y and z axis */\n  dataKey: BubbleChartDataKey;\n\n  /** Z axis range */\n  range: [number, number];\n\n  /** Color of the chart items. Key of `theme.colors` or any valid CSS color, `blue.6` by default. */\n  color?: MantineColor;\n\n  /** Props passed down to the `XAxis` recharts component */\n  xAxisProps?: Omit<XAxisProps, 'ref'>;\n\n  /** Props passed down to the `YAxis` recharts component */\n  yAxisProps?: Omit<YAxisProps, 'ref'>;\n\n  /** Props passed down to the `ZAxis` recharts component */\n  zAxisProps?: Omit<ZAxisProps, 'ref'>;\n\n  /** Props passed down to the `Tooltip` component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to the `Scatter` component */\n  scatterProps?: Omit<ScatterProps, 'ref'>;\n\n  /** Color of the text displayed inside the chart, `'dimmed'` by default */\n  textColor?: MantineColor;\n\n  /** Color of the grid and cursor lines, by default depends on color scheme */\n  gridColor?: MantineColor;\n\n  /** Chart label displayed next to the x axis */\n  label?: string;\n\n  /** Determines whether the tooltip should be displayed, `true` by default */\n  withTooltip?: boolean;\n\n  /** Function to format z axis values */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type BubbleChartFactory = Factory<{\n  props: BubbleChartProps;\n  ref: HTMLDivElement;\n  stylesNames: BubbleChartStylesNames;\n  vars: BubbleChartCssVariables;\n}>;\n\nconst defaultProps: Partial<BubbleChartProps> = {\n  color: 'blue.6',\n  withTooltip: true,\n};\n\nconst varsResolver = createVarsResolver<BubbleChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const BubbleChart = factory<BubbleChartFactory>((_props, ref) => {\n  const props = useProps('BubbleChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    xAxisProps,\n    yAxisProps,\n    zAxisProps,\n    tooltipProps,\n    scatterProps,\n    color,\n    label,\n    withTooltip,\n    dataKey,\n    range,\n    valueFormatter,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<BubbleChartFactory>({\n    name: 'BubbleChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ScatterChart>\n          <XAxis\n            type=\"category\"\n            dataKey={dataKey.x}\n            interval={0}\n            tick={{ fontSize: 12, fill: 'currentColor' }}\n            tickLine={{ transform: 'translate(0, -6)', stroke: 'currentColor' }}\n            stroke=\"currentColor\"\n            {...getStyles('axis')}\n            {...xAxisProps}\n          />\n\n          <YAxis\n            type=\"number\"\n            dataKey={dataKey.y}\n            height={10}\n            width={label ? undefined : 0}\n            tick={false}\n            tickLine={false}\n            axisLine={false}\n            label={{ value: label, position: 'insideRight', fontSize: 12, fill: 'currentColor' }}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          />\n\n          <ZAxis\n            type=\"number\"\n            dataKey={dataKey.z}\n            domain={getDomain(data, dataKey.z)}\n            range={range}\n            {...zAxisProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={100}\n              isAnimationActive={false}\n              cursor={{ stroke: 'var(--chart-grid-color)', strokeWidth: 1, strokeDasharray: '3 3' }}\n              content={(payload) => (\n                <BubbleChartTooltip\n                  dataKey={dataKey}\n                  active={payload.active}\n                  payload={payload.payload}\n                  getStyles={getStyles}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          <Scatter\n            data={data}\n            fill={getThemeColor(color, theme)}\n            isAnimationActive={false}\n            {...scatterProps}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nBubbleChart.displayName = '@mantine/charts/BubbleChart';\nBubbleChart.classes = classes;\n"],
  "mappings": "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",
  "names": ["classes", "defaultProps", "classes", "classes", "defaultProps", "AreaChart", "classes", "ReChartsAreaChart", "valueToPercent", "defaultProps", "varsResolver", "BarChart", "classes", "ReChartsBarChart", "defaultProps", "varsResolver", "LineChart", "classes", "ReChartsLineChart", "classes", "defaultProps", "varsResolver", "ReChartsAreaChart", "classes", "defaultProps", "varsResolver", "classes", "ReChartsPieChart", "classes", "defaultProps", "varsResolver", "classes", "PieChart", "ReChartsPieChart", "classes", "defaultProps", "varsResolver", "RadarChart", "classes", "ReChartsRadarChart", "defaultProps", "varsResolver", "ScatterChart", "classes", "ReChartsScatterChart", "defaultProps", "varsResolver", "classes"]
}
